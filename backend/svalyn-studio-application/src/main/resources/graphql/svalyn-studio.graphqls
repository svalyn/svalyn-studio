scalar Instant

directive @validated on FIELD_DEFINITION

type Query {
  viewer: Viewer
}

type PageInfo {
  count: Int!
}

type Viewer {
  name: String!
  username: String!
  imageUrl: String!
  invitations(page: Int!, rowsPerPage: Int!): ViewerInvitationsConnection!
  profile(username: String!): Profile
  organizations: ViewerOrganizationsConnection!
  organization(identifier: ID!): Organization
  project(identifier: ID!): Project
  changeProposal(id: ID!): ChangeProposal
  notifications(status: [NotificationStatus!]!, page: Int!, rowsPerPage: Int!): ViewerNotificationsConnection!
  unreadNotificationsCount: Int!
  authenticationTokens(page: Int!, rowsPerPage: Int!): ViewerAuthenticationTokensConnection!
}

type ViewerInvitationsConnection {
  edges: [ViewerInvitationsEdge!]!
  pageInfo: PageInfo!
}

type ViewerInvitationsEdge {
  node: Invitation!
}

type ViewerOrganizationsConnection {
  edges: [ViewerOrganizationsEdge!]!
}

type ViewerOrganizationsEdge {
  node: Organization!
}

type Organization {
  identifier: ID!
  name: String!
  role: MembershipRole!
  createdOn: Instant!
  createdBy: Profile!
  lastModifiedOn: Instant!
  lastModifiedBy: Profile!
  invitations(page: Int!, rowsPerPage: Int!): OrganizationInvitationsConnection!
  memberships(page: Int!, rowsPerPage: Int!): OrganizationMembershipsConnection!
  projects(page: Int!, rowsPerPage: Int!): OrganizationProjectsConnection!
}

enum MembershipRole {
  ADMIN
  MEMBER
  NONE
}

type OrganizationInvitationsConnection {
  edges: [OrganizationInvitationsEdge!]!
  pageInfo: PageInfo!
}

type OrganizationInvitationsEdge {
  node: Invitation!
}

type Invitation {
  id: ID!
  organization: Organization!
  member: Profile!
  createdOn: Instant!
  createdBy: Profile!
  lastModifiedOn: Instant!
  lastModifiedBy: Profile!
}

type OrganizationMembershipsConnection {
  edges: [OrganizationMembershipsEdge!]!
  pageInfo: PageInfo!
}

type OrganizationMembershipsEdge {
  node: Membership!
}

type Membership {
  id: ID!
  member: Profile!
  createdOn: Instant!
  createdBy: Profile!
  lastModifiedOn: Instant!
  lastModifiedBy: Profile!
}

type Profile {
  name: String!
  username: String!
  imageUrl: String!
}

type OrganizationProjectsConnection {
  edges: [OrganizationProjectsEdge!]!
  pageInfo: PageInfo!
}

type OrganizationProjectsEdge {
  node: Project!
}

type Project {
  identifier: ID!
  name: String!
  description: String!
  readMe: String!
  organization: Organization!
  createdOn: Instant!
  createdBy: Profile!
  lastModifiedOn: Instant!
  lastModifiedBy: Profile!
  changeProposals(page: Int!, rowsPerPage: Int!): ProjectChangeProposalsConnection!
}

type ProjectChangeProposalsConnection {
  edges: [ProjectChangeProposalsEdge!]!
  pageInfo: PageInfo!
}

type ProjectChangeProposalsEdge {
  node: ChangeProposal!
}

type ChangeProposal {
  id: ID!
  name: String!
  readMe: String!
  status: ChangeProposalStatus!
  project: Project!
  createdOn: Instant!
  createdBy: Profile!
  lastModifiedOn: Instant!
  lastModifiedBy: Profile!
  resources: ChangeProposalResourcesConnection!
  reviews: ChangeProposalReviewsConnection!
}

enum ChangeProposalStatus {
  OPEN
  INTEGRATED
  CLOSED
}

type ChangeProposalResourcesConnection {
  edges: [ChangeProposalResourcesEdge!]!
}

type ChangeProposalResourcesEdge {
  node: ChangeProposalResource!
}

type ChangeProposalResource {
  id: ID!
  name: String!
  content: String!
}

type ChangeProposalReviewsConnection {
  edges: [ChangeProposalReviewsEdge!]!
}

type ChangeProposalReviewsEdge {
  node: Review!
}

type Review {
  id: ID!
  message: String!
  status: ReviewStatus!
  createdOn: Instant!
  createdBy: Profile!
  lastModifiedOn: Instant!
  lastModifiedBy: Profile!
}

enum ReviewStatus {
  APPROVED
  REQUESTED_CHANGES
}

type ViewerNotificationsConnection {
  edges: [ViewerNotificationsEdge!]!
  pageInfo: PageInfo!
}

type ViewerNotificationsEdge {
  node: Notification!
}

type Notification {
  id: ID!
  title: String!
  status: NotificationStatus!
  createdOn: Instant!
  createdBy: Profile!
  lastModifiedOn: Instant!
  lastModifiedBy: Profile!
}

enum NotificationStatus {
  UNREAD
  READ
  DONE
}

type ViewerAuthenticationTokensConnection {
  edges: [ViewerAuthenticationTokensEdge!]!
  pageInfo: PageInfo!
}

type ViewerAuthenticationTokensEdge {
  node: AuthenticationToken!
}

type AuthenticationToken {
  id: ID!
  name: String!
  status: AuthenticationTokenStatus!
  createdOn: Instant!
  lastModifiedOn: Instant!
}

enum AuthenticationTokenStatus {
  ACTIVE
  INACTIVE
}

type Mutation {
  createAuthenticationToken(input: CreateAuthenticationTokenInput!): CreateAuthenticationTokenPayload! @validated
  updateAuthenticationTokensStatus(input: UpdateAuthenticationTokensStatusInput!): UpdateAuthenticationTokensStatusPayload! @validated
  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload! @validated
  updateOrganizationName(input: UpdateOrganizationNameInput!): UpdateOrganizationNamePayload! @validated
  inviteMember(input: InviteMemberInput!): InviteMemberPayload! @validated
  revokeInvitation(input: RevokeInvitationInput!): RevokeInvitationPayload! @validated
  acceptInvitation(input: AcceptInvitationInput!): AcceptInvitationPayload! @validated
  declineInvitation(input: DeclineInvitationInput!): DeclineInvitationPayload! @validated
  revokeMemberships(input: RevokeMembershipsInput!): RevokeMembershipsPayload! @validated
  leaveOrganization(input: LeaveOrganizationInput!): LeaveOrganizationPayload! @validated
  deleteOrganization(input: DeleteOrganizationInput!): DeleteOrganizationPayload! @validated
  createProject(input: CreateProjectInput!): CreateProjectPayload! @validated
  updateProjectName(input: UpdateProjectNameInput!): UpdateProjectNamePayload! @validated
  updateProjectDescription(input: UpdateProjectDescriptionInput!): UpdateProjectDescriptionPayload! @validated
  updateProjectReadMe(input: UpdateProjectReadMeInput!): UpdateProjectReadMePayload! @validated
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload! @validated
  createChangeProposal(input: CreateChangeProposalInput!): CreateChangeProposalPayload! @validated
  updateChangeProposalReadMe(input: UpdateChangeProposalReadMeInput!): UpdateChangeProposalReadMePayload! @validated
  updateChangeProposalStatus(input: UpdateChangeProposalStatusInput!): UpdateChangeProposalStatusPayload! @validated
  addResourcesToChangeProposal(input: AddResourcesToChangeProposalInput!): AddResourcesToChangeProposalPayload! @validated
  removeResourcesFromChangeProposal(input: RemoveResourcesFromChangeProposalInput!): RemoveResourcesFromChangeProposalPayload! @validated
  deleteChangeProposals(input: DeleteChangeProposalsInput!): DeleteChangeProposalsPayload! @validated
  performReview(input: PerformReviewInput!): PerformReviewPayload! @validated
  updateNotificationsStatus(input: UpdateNotificationsStatusInput!): UpdateNotificationsStatusPayload! @validated
}

type ErrorPayload {
  id: ID!
  message: String!
}

type SuccessPayload {
  id: ID!
}

input CreateAuthenticationTokenInput {
  id: ID!
  name: String!
}

union CreateAuthenticationTokenPayload = ErrorPayload | CreateAuthenticationTokenSuccessPayload

type CreateAuthenticationTokenSuccessPayload {
  id: ID!
  authenticationToken: AuthenticationTokenCreated!
}

type AuthenticationTokenCreated {
  name: String!
  accessKey: String!
  secretKey: String!
}

input UpdateAuthenticationTokensStatusInput {
  id: ID!
  authenticationTokenIds: [ID!]!
  status: AuthenticationTokenStatus!
}

union UpdateAuthenticationTokensStatusPayload = ErrorPayload | SuccessPayload

input CreateOrganizationInput {
  id: ID!
  identifier: ID!
  name: String!
}

union CreateOrganizationPayload = ErrorPayload | CreateOrganizationSuccessPayload

type CreateOrganizationSuccessPayload {
  organization: Organization!
}

input UpdateOrganizationNameInput {
  id: ID!
  organizationIdentifier: ID!
  name: String!
}

union UpdateOrganizationNamePayload = ErrorPayload | SuccessPayload

input InviteMemberInput {
  id: ID!
  organizationIdentifier: ID!
  email: String!
}

union InviteMemberPayload = ErrorPayload | SuccessPayload

input RevokeInvitationInput {
  id: ID!
  organizationIdentifier: ID!
  invitationId: ID!
}

union RevokeInvitationPayload = ErrorPayload | SuccessPayload

input AcceptInvitationInput {
  id: ID!
  organizationIdentifier: ID!
  invitationId: ID!
}

union AcceptInvitationPayload = ErrorPayload | SuccessPayload

input DeclineInvitationInput {
  id: ID!
  organizationIdentifier: ID!
  invitationId: ID!
}

union DeclineInvitationPayload = ErrorPayload | SuccessPayload

input RevokeMembershipsInput {
  id: ID!
  organizationIdentifier: ID!
  membershipIds: [ID!]!
}

union RevokeMembershipsPayload = ErrorPayload | SuccessPayload

input LeaveOrganizationInput {
  id: ID!
  organizationIdentifier: ID!
}

union LeaveOrganizationPayload = ErrorPayload | SuccessPayload

input DeleteOrganizationInput {
  id: ID!
  organizationIdentifier: ID!
}

union DeleteOrganizationPayload = ErrorPayload | SuccessPayload

input CreateProjectInput {
  id: ID!
  organizationIdentifier: ID!
  identifier: ID!
  name: String!
  description: String!
}

union CreateProjectPayload = ErrorPayload | CreateProjectSuccessPayload

type CreateProjectSuccessPayload {
  project: Project!
}

input UpdateProjectNameInput {
  id: ID!
  projectIdentifier: ID!
  name: String!
}

union UpdateProjectNamePayload = ErrorPayload | SuccessPayload

input UpdateProjectDescriptionInput {
  id: ID!
  projectIdentifier: ID!
  description: String!
}

union UpdateProjectDescriptionPayload = ErrorPayload | SuccessPayload

input UpdateProjectReadMeInput {
  id: ID!
  projectIdentifier: ID!
  content: String!
}

union UpdateProjectReadMePayload = ErrorPayload | SuccessPayload

input DeleteProjectInput {
  id: ID!
  projectIdentifier: ID!
}

union DeleteProjectPayload = ErrorPayload | SuccessPayload

input CreateChangeProposalInput {
  id: ID!
  projectIdentifier: ID!
  name: String!
  resourceIds: [ID!]!
}

union CreateChangeProposalPayload = ErrorPayload | CreateChangeProposalSuccessPayload

type CreateChangeProposalSuccessPayload {
  changeProposal: ChangeProposal!
}

input UpdateChangeProposalReadMeInput {
  id: ID!
  changeProposalId: ID!
  content: String!
}

union UpdateChangeProposalReadMePayload = ErrorPayload | SuccessPayload

input UpdateChangeProposalStatusInput {
  id: ID!
  changeProposalId: ID!
  status: ChangeProposalStatus!
}

union UpdateChangeProposalStatusPayload = ErrorPayload | SuccessPayload

input AddResourcesToChangeProposalInput {
  id: ID!
  changeProposalId: ID!
  resourceIds: [ID!]!
}

union AddResourcesToChangeProposalPayload = ErrorPayload | SuccessPayload

input RemoveResourcesFromChangeProposalInput {
  id: ID!
  changeProposalId: ID!
  resourceIds: [ID!]!
}

union RemoveResourcesFromChangeProposalPayload = ErrorPayload | SuccessPayload

input DeleteChangeProposalsInput {
  id: ID!
  changeProposalIds: [ID!]!
}

union DeleteChangeProposalsPayload = ErrorPayload | SuccessPayload

input PerformReviewInput {
  id: ID!
  changeProposalId: ID!
  message: String!
  status: ReviewStatus!
}

union PerformReviewPayload = ErrorPayload | SuccessPayload

input UpdateNotificationsStatusInput {
  id: ID!
  notificationIds: [ID!]!
  status: NotificationStatus!
}

union UpdateNotificationsStatusPayload = ErrorPayload | SuccessPayload